plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.firebase.crashlytics'
    id 'maven-publish'
}

apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.android.application"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'

import com.android.build.OutputFile

// The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
// and bundleReleaseJsAndAssets).
// These basically call `react-native bundle` with the correct arguments during the Android build
// cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
// bundle directly from the development server. Below you can see all the possible configurations
// and their defaults. If you decide to add a configuration block, make sure to add it before the
// `apply from: "../../node_modules/react-native/react.gradle"` line.

// project.ext.react = [
//     // the name of the generated asset file containing your JS bundle
//     bundleAssetName: "index.android.bundle",

//     // the entry file for bundle generation
//     entryFile: "index.android.js",

//     // whether to bundle JS and assets in debug mode
//     bundleInDebug: false,

//     // whether to bundle JS and assets in release mode
//     bundleInRelease: true,

//     // whether to bundle JS and assets in another build variant (if configured).
//     // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
//     // The configuration property can be in the following formats
//     //         'bundleIn${productFlavor}${buildType}'
//     //         'bundleIn${buildType}'
//     // bundleInFreeDebug: true,
//     // bundleInPaidRelease: true,
//     // bundleInBeta: true,

//     // whether to disable dev mode in custom build variants (by default only disabled in release)
//     // for example: to disable dev mode in the staging build type (if configured)
//     devDisabledInStaging: true,
//     // The configuration property can be in the following formats
//     //         'devDisabledIn${productFlavor}${buildType}'
//     //         'devDisabledIn${buildType}'

//     // the root of your project, i.e. where "package.json" lives
//     root: "../../",

//     // where to put the JS bundle asset in debug mode
//     jsBundleDirDebug: "$buildDir/intermediates/assets/debug",

//     // where to put the JS bundle asset in release mode
//     jsBundleDirRelease: "$buildDir/intermediates/assets/release",

//     // where to put drawable resources / React Native assets, e.g. the ones you use via
//     // require('./image.png')), in debug mode
//     resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",

//     // where to put drawable resources / React Native assets, e.g. the ones you use via
//     // require('./image.png')), in release mode
//     resourcesDirRelease: "$buildDir/intermediates/res/merged/release",

//     // by default the gradle tasks are skipped if none of the JS files or assets change; this means
//     // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
//     // date; if you have any other folders that you want to ignore for performance reasons (gradle
//     // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
//     // for example, you might want to remove it from here.
//     inputExcludes: ["android/**", "ios/**"],

//     // override which node gets called and with what additional arguments
//     nodeExecutableAndArgs: ["node"],

//     // supply additional arguments to the packager
//     extraPackagerArgs: []
// ]

project.ext.react = [
    entryFile: "index.js",
    enableHermes: true,
    enableVmCleanup: false,
]

apply from: "../../node_modules/react-native/react.gradle"

// Set this to true to create two separate APKs instead of one:
//   - An APK that only works on ARM devices
//   - An APK that only works on x86 devices
// The advantage is the size of the APK is reduced by about 4MB.
// Upload all the APKs to the Play Store and people will download
// the correct one based on the CPU architecture of their device.
def enableSeparateBuildPerCPUArchitecture = false

// Run Proguard to shrink the Java bytecode in release builds.
def enableProguardInReleaseBuilds = true

def jscFlavor = 'org.webkit:android-jsc:+'

def enableHermes = project.ext.react.get("enableHermes", false)
def lifecycle_version = "2.4.0"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst '**/*.so'
    }

	defaultConfig {
		applicationId "com.omantel"
		resValue "string", "build_config_package", "com.omantel"
		minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.targetSdkVersion
		missingDimensionStrategy "RNN.reactNativeVersion", "reactNative60" // See note below!
		missingDimensionStrategy 'react-native-camera', 'mlkit'
		versionCode 1675169235
		versionName "5.23.0-1650457850"
		ndk {
			abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
		}
		multiDexEnabled true
		testBuildType System.getProperty('testBuildType', 'debug') // This will later be used to control the test apk build type
		testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	splits {
		abi {
			reset()
			enable enableSeparateBuildPerCPUArchitecture
			universalApk false // If true, also generate a universal APK
			include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
		}
	}
	buildTypes {
		release {
			minifyEnabled enableProguardInReleaseBuilds
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
			firebaseCrashlytics {
				nativeSymbolUploadEnabled true
				strippedNativeLibsDir "build/ndklibs/obj"
				unstrippedNativeLibsDir "build/ndklibs/libs"
			}
		}
		debug {
			applicationIdSuffix = ".dev"
			versionNameSuffix = "-dev"
		}
	}
	dexOptions {
		javaMaxHeapSize "4g"
	}
	// applicationVariants are e.g. debug, release
	applicationVariants.all { variant ->
		variant.outputs.each { output ->
			// For each separate APK per architecture, set a unique version code as described here:
			// http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
			def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
			def abi = output.getFilter(OutputFile.ABI)
			if (abi != null) { // null for the universal-debug, universal-release variants
				output.versionCodeOverride =
						versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
			}
		}
	}
}

dependencies {
    implementation 'androidx.work:work-runtime-ktx:2.7.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation 'com.google.firebase:firebase-crashlytics-ndk'
    implementation project(':react-native-location')
    implementation project(':react-native-maps')
    implementation project(':react-native-push-notification')
    implementation project(':@react-native-firebase_messaging')
    implementation project(':@react-native-firebase_dynamic-links')
    implementation project(':@react-native-firebase_analytics')
    implementation project(':@react-native-firebase_crashlytics')
    implementation project(':@react-native-firebase_app')
    implementation "com.google.firebase:firebase-messaging:18.0.0"
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar' // <-- Add this line if you wish to use badge on Android
    implementation project(':react-native-view-shot')
    implementation project(':react-native-config')
    implementation project(':@react-native-cookies_cookies')
    implementation("com.squareup.okhttp3:okhttp-urlconnection:4.4.1")
    implementation project(':react-native-safe-area-context')
    implementation project(':react-native-permissions')
    implementation project(':react-native-camera')
    implementation project(':react-native-awesome-card-io')
    implementation project(':react-native-touch-id')
    implementation project(':react-native-share')
    implementation project(':react-native-default-preference')
    implementation project(':react-native-sms-retriever')
    implementation project(':react-native-open-notification')
    implementation project(':react-native-image-picker')
    implementation project(':@react-native-community_cameraroll')
    implementation project(':react-native-view-pdf')
    implementation project(':react-native-carrier-info')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-webview')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-device-info')
    implementation project(':react-native-screens')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-signature-capture')
    implementation project(':@react-native-community_datetimepicker')
    implementation 'com.android.support:multidex:1.0.3'
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/"
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    implementation 'com.google.android.gms:play-services-base:18.1.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'

    implementation project(':react-native-svg')
    implementation project(':@react-native-async-storage')
    implementation project(':react-native-blob-util')
    implementation project(':react-native-keychain')
    implementation project(':react-native-vector-icons')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"
    implementation "com.facebook.react:react-native:+" // From node_modules
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
    implementation project(':react-native-community-netinfo')
    implementation project(':lottie-react-native')
    androidTestImplementation(project(path: ":detox"))
    androidTestImplementation 'junit:junit:4.12'
    api 'androidx.annotation:annotation:1.1.0'
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation project(':react-native-add-calendar-event')
    implementation project(':react-native-document-picker')
	implementation project(":react-native-adjust")
	implementation project(':react-native-securerandom')
	implementation project(':clevertap-react-native')
	implementation 'com.google.android.gms:play-services-analytics:18.0.2'
	implementation 'com.android.installreferrer:installreferrer:1.0'
    implementation "com.google.firebase:firebase-iid:21.1.0"
    implementation("com.github.g-behealthy:BeHealthy-Android-Framework:1.3.14@aar"){transitive true}
    implementation 'com.google.firebase:firebase-analytics'
    implementation "com.google.dagger:hilt-android:2.42"
    implementation "androidx.startup:startup-runtime:1.0.0"
    kapt "com.google.dagger:hilt-android-compiler:2.42"
    kapt "com.google.dagger:hilt-compiler:2.42"
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}
